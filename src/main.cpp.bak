#include <stdio.h>
#include <SDL2/SDL.h>
#include <SDL2/SDL_timer.h>
#include <SDL2/SDL_image.h>

#define WINDOW_WIDTH 1280
#define WINDOW_HEIGHT 720
#define FPS 60

int main(int argc, char* args[])
{
    // Init video module
    bool successInit = SDL_Init(SDL_INIT_VIDEO);

    if (successInit)
    {
        printf("Error initializing SDL: %s ", SDL_GetError());
        return 1;
    }

    // Init is successful
    printf("SDL Initialization successful.\n");

    // Init window
    SDL_Window* win = SDL_CreateWindow("SDL-test-program",  /// window title 
        SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,     /// window position
        WINDOW_WIDTH, WINDOW_HEIGHT,                        /// window size
        0);                                                 /// flags
        
    // Window init error
    if (win == 0)
    {
        printf("Error initializing SDL_Window: %s\n", SDL_GetError());
        SDL_Quit();
        return 1;
    }

    // Window initialization successful
    printf("SDL_Window initialization successful.\n");

    // Init the renderer hardware
    Uint32 rendererFlags = SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC;
    SDL_Renderer* renderer = SDL_CreateRenderer(win, -1, rendererFlags);
    if (!renderer)
    {
        printf("Error initializing SDL_Renderer: %s\n", SDL_GetError());
        SDL_DestroyWindow(win);
        SDL_Quit();
        return 1;
    }

    // Renderer initialization successful
    printf("SDL_Renderer initialization successful.\n");

    // Load the image into memory
    SDL_Surface* surface = IMG_Load("./elements/images/background/parallax-space-big-planet.png");
    if (!surface)
        printf("Error initializing SDL_Surface: %s\n", SDL_GetError());
    else
        printf("SDL_Surface initialization successful.\n");

    // Load image into renderer hardware memory
    SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, surface);
    if (!texture)
        printf("Error initializing SDL_Texture: %s\n", SDL_GetError());
    else
        printf("SDL_Texture initialization successful.\n");

    // Struct to hold the pos and size of the texture
    SDL_Rect rect;

    // Get the dimensions of the texture
    SDL_QueryTexture(texture, NULL, NULL, &rect.w, &rect.h);

    // Set the initial position of the texture
    rect.x = (WINDOW_WIDTH - rect.w) / 2;
    rect.y = WINDOW_HEIGHT;

    // << Game Loop >>
    bool exitState = false;
    while (!exitState)
    {
        // process events
        SDL_Event event;
        while (SDL_PollEvent(&event))
        {
            if (event.type == SDL_QUIT)
                exitState = true;
        }

        // Game Code before render clear
        rect.y *= 0.9f;

        // Clear the renderer window
        SDL_RenderClear(renderer);

        // Game Code after render clear
        // ...

        // Draw image to render target (here buffer)
        SDL_RenderCopy(renderer, texture, NULL, &rect);
        // Draw render target to window
        SDL_RenderPresent(renderer);

        // Set refresh rate
        SDL_Delay(1000/FPS);
    }

    // Clean Exit
    SDL_DestroyTexture(texture);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(win);
    SDL_Quit();
    return 0;
}